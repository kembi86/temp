<?php

namespace modava\auth\controllers;

use modava\auth\models\UserMetadata;
use modava\auth\models\UserModel;
use modava\auth\models\UserProfile;
use Yii;
use yii\db\Transaction;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\web\NotFoundHttpException;
use backend\components\MyController;
use modava\auth\models\User;

/**
 * UserController implements the CRUD actions for User model.
 */
class UserMetadataController extends MyController
{

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->layout = 'user';
    }

    /**
     * Updates an existing User model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);
        $user = new User();
        if ($model == null) {
            Yii::$app->session->setFlash('toastr-' . $user->toastr_key . '-index', [
                'title' => 'Thông báo',
                'text' => 'Không tìm thấy user',
                'type' => 'warning'
            ]);
            return $this->redirect(['/auth/user/index']);
        }

        if ($model->load(Yii::$app->request->post())) {
            if ($model->validate() && $model->save()) {
                Yii::$app->session->setFlash('toastr-' . $user->toastr_key . '-view', [
                    'title' => 'Thông báo',
                    'text' => 'Cập nhật thành công',
                    'type' => 'success'
                ]);
                return $this->redirect(['/auth/user/view', 'id' => $id]);
            } else {
                $errors = Html::tag('p', 'Cập nhật thất bại');
                foreach ($model->getErrors() as $error) {
                    $errors .= Html::tag('p', $error[0]);
                }
                Yii::$app->session->setFlash('toastr-' . $model->toastr_key . '-form', [
                    'title' => 'Thông báo',
                    'text' => $errors,
                    'type' => 'warning'
                ]);
            }
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    protected function findModel($id)
    {
        $user = User::findOne(['id' => $id]);
        if ($user == null) {
            return null;
        }
        $model = UserMetadata::findOne(['user_id' => $id]);
        if ($model == null) $model = new UserMetadata(['user_id' => $id]);
        return $model;
    }
}
